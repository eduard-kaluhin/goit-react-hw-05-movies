{"version":3,"file":"static/js/22.457e6366.chunk.js","mappings":"iRAEaA,E,QAAUC,EAAOC,IAAV,mJ,SCCPC,EAAS,WACpB,OACE,SAACH,EAAD,WACE,SAAC,KAAD,CACEI,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAIb,E,UCoFD,EAxFqB,WAAO,IAAD,IACjBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKT,EAAL,CACA,IAAMU,EAAc,mCAAG,oGAEnBJ,GAAa,GAFM,SAGQK,EAAAA,EAAUC,eAAeZ,GAHjC,OAGba,EAHa,OAInBT,EAAaS,GAJM,gDAMnBL,EAAS,KAAMM,SANI,yBAQnBR,GAAa,GARM,4EAAH,qDAWpBI,GAZoB,CAarB,GAAE,CAACV,IAEJ,IAAMe,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAUXC,EAAkB,OAAThB,QAAS,IAATA,GAAAA,EAAWiB,YAAX,yCACuBjB,EAAUiB,aAC5C,GAEJ,OACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAQC,QAhBO,WACjBN,EAASO,MACXL,EAASF,EAASO,MAAMC,MAG1BN,EAAS,IACV,EAUO,SAAiC,yBAChCV,IAAS,uBAAIA,EAAMO,UACnBT,IAAa,SAACd,EAAD,IACb4B,GACC,gBACEK,IAAKL,EACLM,IAAG,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAWuB,MAChBhC,MAAM,QACND,OAAO,QACPkC,QAAQ,UAGV,SAAC,KAAD,OAGW,OAAdxB,IACC,UAAC,KAAD,YACE,wBAAKA,EAAUuB,SACf,yBAAG,cACW,IACVvB,EAAUyB,cAEmB,IAAzBzB,EAAUyB,aAAuB,KAAKC,UADxC,IACkD,QAGxD,wBAAI,cACJ,uBAAI1B,EAAU2B,YACd,wBAAI,YACJ,wBACG,UAAA3B,EAAU4B,cAAV,eAAkBC,QAAS,EAA3B,UACG7B,EAAU4B,cADb,aACG,EAAkBE,KAAI,qBAAGC,KAClBC,QAAQ,WAAY,MADL,IAGtB,gCAKZ,UAAC,KAAD,YACE,SAAC,KAAD,CAAYC,GAAG,OAAf,SAAsB,uBACtB,SAAC,KAAD,CAAYA,GAAG,UAAf,SAAyB,6BAE3B,SAAC,KAAD,MAGL,C","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  width: 180px;\n  height: auto;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { MagnifyingGlass } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Wrapper>\n      <MagnifyingGlass\n        visible={true}\n        height=\"140\"\n        width=\"140\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#03196a\"\n      />\n    </Wrapper>\n  );\n};\n","import { useParams, useLocation, Outlet, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { responses } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  NoPoster,\n  Wrapper,\n  Button,\n  Flex,\n  Div,\n  Container,\n  StyledLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieData, setMovieData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieData = async () => {\n      try {\n        setIsLoading(true);\n        const movieDetails = await responses.fetchMovieById(movieId);\n        setMovieData(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieData();\n  }, [movieId]);\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleMoveBack = () => {\n    if (location.state) {\n      navigate(location.state.from);\n      return;\n    }\n    navigate('/');\n  };\n\n  const imgSrc = movieData?.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movieData.poster_path}`\n    : '';\n\n  return (\n    <Container>\n      <Flex>\n        <Wrapper>\n          <Button onClick={handleMoveBack}>â—€â—€ Go back</Button>\n          {error && <p>{error.message}</p>}\n          {isLoading && <Loader />}\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              alt={movieData?.title}\n              width=\"400px\"\n              height=\"600px\"\n              loading=\"lazy\"\n            />\n          ) : (\n            <NoPoster />\n          )}\n        </Wrapper>\n        {movieData !== null && (\n          <Wrapper>\n            <h1>{movieData.title}</h1>\n            <p>\n              User Score:{' '}\n              {!movieData.vote_average\n                ? '0'\n                : ((movieData.vote_average * 1000) / 100).toFixed()}\n              %\n            </p>\n            <h2>Overview</h2>\n            <p>{movieData.overview}</p>\n            <h2>Genres</h2>\n            <p>\n              {movieData.genres?.length > 0\n                ? movieData.genres?.map(({ name }) =>\n                    name.replace(/([A-Z])/g, ' $1')\n                  )\n                : 'No results of genres'}\n            </p>\n          </Wrapper>\n        )}\n      </Flex>\n      <Div>\n        <StyledLink to=\"cast\">Cast ðŸ‘ˆ</StyledLink>\n        <StyledLink to=\"reviews\">Reviews ðŸ‘ˆ</StyledLink>\n      </Div>\n      <Outlet />\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Wrapper","styled","div","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","movieId","useParams","useState","movieData","setMovieData","isLoading","setIsLoading","error","setError","useEffect","fetchMovieData","responses","fetchMovieById","movieDetails","message","location","useLocation","navigate","useNavigate","imgSrc","poster_path","onClick","state","from","src","alt","title","loading","vote_average","toFixed","overview","genres","length","map","name","replace","to"],"sourceRoot":""}