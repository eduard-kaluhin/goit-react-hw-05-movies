{"version":3,"file":"static/js/991.c3e77dc9.chunk.js","mappings":"yOAIMA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8GAOHE,EAAW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAChCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,yBACE,SAACR,EAAD,CAAYS,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMJ,GAAhD,gBACGH,QADH,IACGA,EAAAA,EAASC,KAIjB,ECnBYO,EAAKX,EAAAA,GAAOY,GAAV,8SCCFC,EAAa,SAAC,GAAqB,IAAD,IAAlBC,OAAAA,OAAkB,MAAT,GAAS,EACvCC,EAAYC,MAAMC,QAAQH,KAAiB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQI,QAAS,EAE5D,OACE,+BACE,SAACP,EAAD,UACGI,GACCD,EAAOK,KAAI,SAAAC,GAAK,OAAI,SAAClB,GAAD,UAA6BkB,GAAdA,EAAMf,GAAzB,OAIzB,C,+JCZYgB,EAAMrB,EAAAA,GAAOsB,IAAV,4FAKHC,EAAOvB,EAAAA,GAAOwB,KAAV,6IAQJC,EAASzB,EAAAA,GAAO0B,OAAV,0SAgBNC,EAAQ3B,EAAAA,GAAO4B,MAAV,8P,SC3BZC,EAAe,CACnBC,YAAa,IAGFC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAAgCC,EAAAA,EAAAA,UAASJ,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAQA,OACE,SAACd,EAAD,WACE,UAACE,EAAD,CAAMS,SARa,SAAAI,GACrBA,EAAEC,iBACFL,EAASE,EAASJ,aAClBK,EAAY,CAAEL,YAAa,IAC5B,EAIG,WACE,SAACH,EAAD,CACEW,KAAK,OACLlC,KAAK,cACLmC,MAAOL,EAASJ,YAChBU,SAAU,YAAkC,IAAD,IAA9BC,OAAUF,EAAoB,EAApBA,MAAOnC,EAAa,EAAbA,KAC5B+B,GAAY,kBAAKD,GAAN,cAAiB9B,EAAOmC,IACpC,EACDG,aAAa,MACbC,WAAS,EACTC,UAAQ,EACRC,YAAY,mBAEd,SAACpB,EAAD,CAAQa,KAAK,SAAb,UACE,0BAAM,iBAKf,E,oBCND,EAxBe,WAAO,IAAD,EACnB,GAAwCQ,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,sBAApB,QAAsC,GACvD,GAA6CC,EAAAA,EAAAA,KAArCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,UAEhCC,EAAAA,EAAAA,YAAU,WACHP,GACLM,EAASE,EAAAA,EAAUC,mBAAmBT,GACvC,GAAE,CAACM,EAAUN,IAEd,IAAMnC,EAAM,OAAGuC,QAAH,IAAGA,OAAH,EAAGA,EAAMM,QAMrB,OACE,6BACE,SAAC5B,EAAD,CAAWC,SANM,SAAAiB,GACnBD,EAAgB,CAAEC,YAAaA,GAChC,KAKG,SAACpC,EAAA,EAAD,CAAYyC,MAAOA,EAAOF,UAAWA,EAAWtC,OAAQA,MAG7D,C","sources":["components/MoviItem/MoviItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(NavLink)`\n  color: #966060;\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const MoviItem = ({ title, name, id }) => {\n  const location = useLocation();\n\n  return (\n    <li>\n      <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n        {title ?? name}\n      </StyledLink>\n    </li>\n  );\n};\n\nMoviItem.propTypes = {\n  title: PropTypes.string,\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  background-color: #f9f8f8;\n  box-shadow: 0px 0px 8px 4px rgba(0, 0, 0, 0.16),\n    0px 0px 0px 0px rgba(0, 0, 0, 0.1);\n\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { MoviItem } from 'components/MoviItem/MoviItem';\nimport { Ul } from './MoviesList.styled';\nexport const MoviesList = ({ movies = [] }) => {\n  const isVisible = Array.isArray(movies) && movies?.length > 0;\n\n  return (\n    <>\n      <Ul>\n        {isVisible &&\n          movies.map(movie => <MoviItem key={movie.id} {...movie} />)}\n      </Ul>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  padding-top: 50px;\n  display: flex;\n  justify-content: center;\n`;\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n  border-radius: 3px;\n  padding-bottom: 50px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 88px;\n  height: 46px;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  cursor: pointer;\n  border: none;\n  font-size: 18px;\n  color: black;\n  &:is:hover {\n    background-color: white;\n  }\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 600px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 10px;\n  border: 1px solid #060505;\n  &:placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Div, Form, Button, Input } from './SearchBar.styled';\n\nconst initialState = {\n  searchValue: '',\n};\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [formData, setFormData] = useState(initialState);\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    onSubmit(formData.searchValue);\n    setFormData({ searchValue: '' });\n  };\n\n  return (\n    <Div>\n      <Form onSubmit={onHandleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"searchValue\"\n          value={formData.searchValue}\n          onChange={({ target: { value, name } }) => {\n            setFormData({ ...formData, [name]: value });\n          }}\n          autoComplete=\"off\"\n          autoFocus\n          required\n          placeholder=\" Search movie\"\n        />\n        <Button type=\"submit\">\n          <span>Search</span>\n        </Button>\n      </Form>\n    </Div>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { responses } from 'services/api';\n\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { useFetchMovies } from 'hooks/fetchApi';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('searchQuery') ?? '';\n  const { isLoading, data, error, fetchApi } = useFetchMovies();\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    fetchApi(responses.fetchMovieBySearch(searchQuery));\n  }, [fetchApi, searchQuery]);\n\n  const movies = data?.results;\n\n  const handleSubmit = searchQuery => {\n    setSearchParams({ searchQuery: searchQuery });\n  };\n\n  return (\n    <main>\n      <SearchBar onSubmit={handleSubmit} />\n      <MoviesList error={error} isLoading={isLoading} movies={movies} />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["StyledLink","styled","NavLink","MoviItem","title","name","id","location","useLocation","to","state","from","Ul","ul","MoviesList","movies","isVisible","Array","isArray","length","map","movie","Div","div","Form","form","Button","button","Input","input","initialState","searchValue","SearchBar","onSubmit","useState","formData","setFormData","e","preventDefault","type","value","onChange","target","autoComplete","autoFocus","required","placeholder","useSearchParams","searchParams","setSearchParams","searchQuery","get","useFetchMovies","isLoading","data","error","fetchApi","useEffect","responses","fetchMovieBySearch","results"],"sourceRoot":""}